name: Publish to npm and GitHub Packages

on:
  push:
    branches: [ main ]
  workflow_dispatch: # Allow manual triggering

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.check.outputs.changed }}
      package-name: ${{ steps.package-info.outputs.name }}
      version: ${{ steps.package-info.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Get package info
        id: package-info
        run: |
          echo "name=$(jq -r '.name' package.json)" >> $GITHUB_OUTPUT
          echo "version=$(jq -r '.version' package.json)" >> $GITHUB_OUTPUT

      - name: Check if version changed
        id: check
        run: |
          echo "=== Debug: Checking for version changes ==="
          CURRENT_VERSION=$(jq -r '.version' package.json)
          echo "Current version: $CURRENT_VERSION"
          
          # Check if this version has been published by looking for a git tag
          if git tag -l "v$CURRENT_VERSION" | grep -q "v$CURRENT_VERSION"; then
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "‚ùå Version $CURRENT_VERSION already published (tag exists)"
          else
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Version $CURRENT_VERSION is new (no tag found)"
          fi

  publish:
    runs-on: ubuntu-latest
    needs: check-version
    if: needs.check-version.outputs.version-changed == 'true'
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js (npmjs)
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org/'

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build --if-present

      # --- Publish to npmjs.com ---
      - name: Publish to npmjs
        run: |
          if npm publish --access public; then
            echo "‚úÖ Successfully published to npm"
          else
            if npm view create-nextpy-app@${{ needs.check-version.outputs.version }} > /dev/null 2>&1; then
              echo "‚ö†Ô∏è Version ${{ needs.check-version.outputs.version }} already exists on npm - skipping"
            else
              echo "‚ùå Failed to publish to npm for unknown reason"
              exit 1
            fi
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # --- Prepare for GitHub Packages ---
      - name: Change package name to scoped for GitHub
        run: |
          # Convert repository owner to lowercase for npm compatibility
          OWNER_LOWERCASE=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          npm pkg set name="@${OWNER_LOWERCASE}/${{ needs.check-version.outputs.package-name }}"

      - name: Setup Node.js (GitHub Packages)
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://npm.pkg.github.com/'

      # --- Publish to GitHub Packages ---
      - name: Publish to GitHub Packages
        run: |
          if npm publish; then
            echo "‚úÖ Successfully published to GitHub Packages"
          else
            echo "‚ö†Ô∏è Failed to publish to GitHub Packages (may already exist)"
            # Continue anyway as this is not critical
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # --- Create GitHub Release ---
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.check-version.outputs.version }}
          name: Release v${{ needs.check-version.outputs.version }}
          body: |
            ## Changes in v${{ needs.check-version.outputs.version }}
            
            üöÄ **Package published to:**
            - [npmjs.com](https://www.npmjs.com/package/${{ needs.check-version.outputs.package-name }})
            - [GitHub Packages](https://github.com/${{ github.repository }}/packages)
            
            üì¶ **Install with:**
            ```bash
            npm install ${{ needs.check-version.outputs.package-name }}
            # or
            npx ${{ needs.check-version.outputs.package-name }}
            ```
            
            üîó **Repository:** https://github.com/${{ github.repository }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
